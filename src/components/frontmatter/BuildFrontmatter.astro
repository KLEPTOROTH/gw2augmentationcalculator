---
import Tooltip2 from "@components/Tooltip2.astro";
import CopyTemplate from "@components/gw2/CopyTemplate.astro";
import SectionsToggle from "@components/sections/SectionsToggle.astro";
import type { BoonsTypes } from "@gw2-ui/data/boons";
import type { ConditionTypes } from "@gw2-ui/data/conditions";
import type { EliteSpecTypes, ProfessionTypes } from "@gw2-ui/data/professions";
import { Icon } from "astro-icon/components";
import Gear from "src/icons/gear.astro";
import Card from "../Card.astro";
import TextDivider from "../TextDivider.astro";
import Boon from "../gw2-ui/Boon.astro";
import Condition from "../gw2-ui/Condition.astro";
import Profession from "../gw2-ui/Profession.astro";
import Li from "../html-components/li.astro";

export interface Props {
  title: string;
  specialization: EliteSpecTypes;
  role: string;
  hasBeginner: boolean;
  date: string;
  hidden?: boolean;
  rating: string;
  profession: ProfessionTypes;
  boons: {
    name: BoonsTypes;
    uptime: string;
    variant: string;
  }[];
  conditions: {
    name: ConditionTypes;
    uptime: string;
  }[];
  code: string;
  cmGuide?: string;
  uptodate?: {
    guide?: boolean;
    gear?: boolean;
  };
  headerVideoId?: string;
}

const {
  title,
  specialization,
  code,
  hasBeginner,
  profession,
  date,
  boons,
  rating,
  cmGuide,
  conditions,
  uptodate: { guide = true, gear = true } = {},
  headerVideoId,
} = Astro.props;
---

{
  headerVideoId && (
    <div class="relative h-full mx-[-1.4rem] mt-[-1.393rem] mb-4 max-xl:hidden max-[1439px]:mt-[-1rem] max-[1439px]:mx-[-1rem]">
      <video muted autoplay loop width="1440" height="810">
        <source src={`/${headerVideoId}`} type="video/mp4" />
      </video>

      <div
        class={`transform absolute top-0 left-0 max-w-full h-[105px] flex justify-between flex-col items-start px-4 text-neutral-800 rounded-br`}
        style={{
          backgroundColor:
            "var(--gw2-color-" + profession.toLowerCase() + "-main)",
        }}
      >
        <div class="flex flex-grow">
          <Profession
            disableLink
            disableText
            name={specialization}
            size="gigantic"
            className="self-center"
          />
          <div class="ml-4 self-center">
            <h1 class="mb-0 font-bold">{title}</h1>
            <div class="text-lg">{rating}</div>
          </div>
        </div>
      </div>

      <div
        class={`flex absolute bottom-0 left-0 px-4 pt-4 rounded-tl-md flex-col`}
      >
        {boons && (
          <Card>
            <div class="text-xs font-bold m-auto text-center">Boons</div>
            <ul class="list-none !m-0 !pl-0">
              {boons.map(({ name }) => (
                <Li>
                  <Boon name={name} />
                </Li>
              ))}
            </ul>
          </Card>
        )}
        {conditions && (
          <Card>
            <div class="text-xs font-bold m-auto text-center">Conditions</div>
            <ul class="list-none !m-0 !pl-0">
              {conditions.map(({ name }) => (
                <Li>
                  <Condition name={name} />
                </Li>
              ))}
            </ul>
          </Card>
        )}
      </div>

      <div
        class="absolute top-0 right-0 p-1 text-sm bg-blue-600 text-neutral-800 rounded-bl"
        style={{
          backgroundColor:
            "var(--gw2-color-" + profession.toLowerCase() + "-main)",
        }}
      >
        <ul>
          <li class="flex gap-1 items-center">
            <Icon name="mdi:calendar" height={12.8} /> last updated on{" "}
            {new Date(date.trim()).toDateString()}
          </li>
          <li class="flex gap-1 items-center">
            <Icon name="mdi:account" height={12.8} /> Gear: {!gear ? "not" : ""}{" "}
            up-to-date
          </li>
          <li class="flex gap-1 items-center">
            <Icon name="mdi:television-guide" height={12.8} /> Guide:{" "}
            {!guide ? "not" : ""}
            up-to-date
          </li>
        </ul>
      </div>
    </div>
  )
}
<div class:list={["flex", "max-md:flex-col", { "xl:hidden": headerVideoId }]}>
  <div class="flex flex-grow">
    <Profession
      disableLink
      disableText
      name={specialization}
      size="gigantic"
      className="self-center"
    />
    <div class="ml-4 self-center">
      <h1 class="mb-0 font-bold">{title}</h1>
      <div class="text-lg">
        <span>{rating}</span>
      </div>
    </div>
  </div>
  <ul class="mb-4 md:mt-2">
    <li class="flex gap-1 items-center text-xs font-normal">
      <Icon name="mdi:calendar" height={13} /> last updated on{" "}
      {new Date(date.trim()).toDateString()}
    </li>
    <!--

      <li class="flex gap-1 items-center">
      <Icon name="mdi:account" height="0.8rem" /> Gear: {!gear ? "not" : ""}{
        " "
      }
      up-to-date
    </li>
    <li class="flex gap-1 items-center">
      <Icon name="mdi:television-guide" height="0.8rem" /> Guide:{" "}
      {!guide ? "not" : ""}
      up-to-date
    </li>

  -->
  </ul>
</div>

<header class="flex items-center mb-4 gap-4 flex-wrap">
  {
    cmGuide && (
      <button class="btn btn-primary btn-sm">
        <a href={cmGuide} target="_blank" rel="noopener noreferrer">
          CM Guide
        </a>
      </button>
    )
  }
  {code && <CopyTemplate code={code} />}

  {
    hasBeginner && (
      <SectionsToggle
        labels={["Simplified", "Detailed"]}
        tooltipTexts={[
          "Focusing on the important information with <br />safer gear and build options for newer players",
          "In depth information with multiple gear and build options <br />for players who want to optimize their gameplay",
        ]}
        dataTags={["simplified", "detailed"]}
      />
    )
  }

  <div class="flex flex-row">
    {
      boons?.map((boon) => (
        <Tooltip2>
          <Boon
            name={boon.name}
            disableLink
            disableText
            size="medium"
            disableTooltip
            slot="target"
          />
          <span slot="tooltip">
            {boon.uptime} uptime {boon.variant}
          </span>
        </Tooltip2>
      ))
    }
    {
      conditions?.map(({ name, uptime }) => (
        <Tooltip2>
          <Condition
            name={name}
            disableLink
            disableText
            size="medium"
            disableTooltip
            slot="target"
          />
          <span slot="tooltip">{uptime || "some"} uptime</span>
        </Tooltip2>
      ))
    }
  </div>

  <div class="flex-grow"></div>

  <div class="flex gap-4">
    <Tooltip2>
      <div
        class:list={[
          "badge",
          "p-3",
          { "badge-success": gear, "badge-error": !gear },
        ]}
        slot="target"
      >
        <Gear width="1rem" height="1rem" /> Gear
      </div>
      <span slot="tooltip">Gear is {!gear ? "not" : ""} up-to-date</span>
    </Tooltip2>
    <Tooltip2>
      <div
        class:list={[
          "badge",
          "p-3",
          { "badge-success": guide, "badge-error": !guide },
        ]}
        slot="target"
      >
        <Icon name="mdi:tune" size={16} /> Guide
      </div>
      <span slot="tooltip">Guide is {!guide ? "not" : ""} up-to-date</span>
    </Tooltip2>
  </div>
</header>
<TextDivider text="Overview" />
